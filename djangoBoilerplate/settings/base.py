"""
Django settings for djangoBoilerplate project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import os
# from distutils.util import strtobool
# from os.path import join
from .configs import simple_jwt, rest_framework, optimization
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

from configurations import Configuration


class Base(Configuration, simple_jwt, rest_framework, optimization):
    PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    BASE_DIR = os.path.dirname(PROJECT_DIR)
    
    INSTALLED_APPS = [
        "home",
        "search",
        "wagtail.contrib.forms",
        "wagtail.contrib.redirects",
        "wagtail.embeds",
        "wagtail.sites",
        "wagtail.users",
        "wagtail.snippets",
        "wagtail.documents",
        "wagtail.images",
        "wagtail.search",
        "wagtail.admin",
        "wagtail",
        "modelcluster",
        "taggit",
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
    ]

    MIDDLEWARE = [
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    ]

    ROOT_URLCONF = "djangoBoilerplate.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [
                os.path.join(PROJECT_DIR, "templates"),
            ],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]

    WSGI_APPLICATION = "djangoBoilerplate.wsgi.application"

    # Mail
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

    ADMINS = (
        ('Author', 'arpitdawar79@gmail.com'),
    )

    CORS_ORIGIN_ALLOW_ALL = True
    ALLOWED_HOSTS = ["*"]

    DB_URI = os.getenv('DB_URI')
    if DB_URI is None:
        raise ImproperlyConfigured("The DB_URI env variable must not be empty.")

    DATABASES = {
        'default': dj_database_url.config(
            default=DB_URI,
            conn_max_age=3600
        )
    }

    CACHES = {
        "default": {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': [
                'redis://localhost:6379?db=1'
            ],
            'TIMEOUT': 60 * 60 * 2,  # Cache timeout as 2 hours #
            #'TIMEOUT': 1,  # Cache timeout as 1 Second for Testing #
            'OPTIONS': {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "CONNECTION_POOL_KWARGS": {"max_connections": 2000}
            },
        },
    }


    # Password validation
    # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/4.1/topics/i18n/

    LANGUAGE_CODE = "en-us"

    APPEND_SLASH = True

    TIME_ZONE = 'Asia/Kolkata'

    # If you set this to False, Django will make some optimizations so as not
    # to load the internationalization machinery.
    USE_I18N = False
    USE_L10N = True
    USE_TZ = True
    LOGIN_REDIRECT_URL = '/'


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/

    STATICFILES_FINDERS = [
        "django.contrib.staticfiles.finders.FileSystemFinder",
        "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    ]

    STATICFILES_DIRS = [
        os.path.join(PROJECT_DIR, "static"),
    ]

    # ManifestStaticFilesStorage is recommended in production, to prevent outdated
    # JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
    # See https://docs.djangoproject.com/en/4.1/ref/contrib/staticfiles/#manifeststaticfilesstorage
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    STATIC_URL = "/static/"

    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"


    # Wagtail settings

    WAGTAIL_SITE_NAME = "djangoBoilerplate"

    # Search
    # https://docs.wagtail.org/en/stable/topics/search/backends.html
    WAGTAILSEARCH_BACKENDS = {
        "default": {
            "BACKEND": "wagtail.search.backends.database",
        }
    }

    # Base URL to use when referring to full URLs within the Wagtail admin backend -
    # e.g. in notification emails. Don't include '/admin' or a trailing slash
    WAGTAILADMIN_BASE_URL = "http://example.com"

    # def __init__(self) -> None:
    #     print(self.DATABASES, self.MONGO_SETTINGS)
    #     super(Configuration).__init__()
